package decimal

import (
	"fmt"
	"math/big"
	"sync"
)

// fint (Fast INTeger) is a wrapper around uint64.
type fint uint64

// maxFint is a maximum value of fint.
const maxFint = 9_999_999_999_999_999_999

// pow10 is a cache of powers of 10, where pow10[x] = 10^x.
var pow10 = [...]fint{
	1,                          // 10^0
	10,                         // 10^1
	100,                        // 10^2
	1_000,                      // 10^3
	10_000,                     // 10^4
	100_000,                    // 10^5
	1_000_000,                  // 10^6
	10_000_000,                 // 10^7
	100_000_000,                // 10^8
	1_000_000_000,              // 10^9
	10_000_000_000,             // 10^10
	100_000_000_000,            // 10^11
	1_000_000_000_000,          // 10^12
	10_000_000_000_000,         // 10^13
	100_000_000_000_000,        // 10^14
	1_000_000_000_000_000,      // 10^15
	10_000_000_000_000_000,     // 10^16
	100_000_000_000_000_000,    // 10^17
	1_000_000_000_000_000_000,  // 10^18
	10_000_000_000_000_000_000, // 10^19
}

// add calculates x + y and checks overflow.
func (x fint) add(y fint) (z fint, ok bool) {
	if maxFint-x < y {
		return 0, false
	}
	z = x + y
	return z, true
}

// mul calculates x * y and checks overflow.
func (x fint) mul(y fint) (z fint, ok bool) {
	if y == 0 {
		return 0, true
	}
	z = x * y
	if z/y != x {
		return 0, false
	}
	if z > maxFint {
		return 0, false
	}
	return z, true
}

// quo calculates x / y and checks division by zero and inexact division.
func (x fint) quo(y fint) (z fint, ok bool) {
	if y == 0 {
		return 0, false
	}
	z = x / y
	if z*y != x {
		return 0, false
	}
	return z, true
}

// quoRem calculates q = ⌊x / y⌋, r = x - y * q and checks division by zero.
func (x fint) quoRem(y fint) (q, r fint, ok bool) {
	if y == 0 {
		return 0, 0, false
	}
	q = x / y
	r = x - q*y
	return q, r, true
}

// subAbs calculates |x - y|.
func (x fint) subAbs(y fint) fint {
	if x > y {
		return x - y
	}
	return y - x
}

// lsh (Left Shift) calculates x * 10^shift and checks overflow.
func (x fint) lsh(shift int) (z fint, ok bool) {
	// Special cases
	switch {
	case shift <= 0:
		return x, true
	case shift == 1 && x < maxFint/10: // to speed up common case
		return x * 10, true
	case shift >= len(pow10):
		return 0, false
	}
	// General case
	y := pow10[shift]
	return x.mul(y)
}

// fsa (Fused Shift and Addition) calculates x * 10^shift + b and checks overflow.
func (x fint) fsa(shift int, b byte) (z fint, ok bool) {
	z, ok = x.lsh(shift)
	if !ok {
		return 0, false
	}
	z, ok = z.add(fint(b))
	if !ok {
		return 0, false
	}
	return z, true
}

func (x fint) isOdd() bool {
	return x&1 != 0
}

// rshHalfEven (Right Shift) calculates round(x / 10^shift) and rounds result
// using "half to even" rule.
func (x fint) rshHalfEven(shift int) fint {
	// Special cases
	switch {
	case x == 0:
		return 0
	case shift <= 0:
		return x
	case shift >= len(pow10):
		return 0
	}
	// General case
	y := pow10[shift]
	z := x / y
	r := x - z*y                        // r = x % y
	y = y >> 1                          // y = y / 2, which is safe as y is a multiple of 10
	if y < r || (y == r && z.isOdd()) { // half-to-even
		z++
	}
	return z
}

// rshUp (Right Shift) calculates ⌈x / 10^shift⌉ and rounds result away from zero.
func (x fint) rshUp(shift int) fint {
	// Special cases
	switch {
	case x == 0:
		return 0
	case shift <= 0:
		return x
	case shift >= len(pow10):
		return 1
	}
	// General case
	y := pow10[shift]
	z := x / y
	r := x - z*y // r = x % y
	if r > 0 {
		z++
	}
	return z
}

// rshDown (Right Shift) calculates ⌊x / 10^shift⌋ and rounds result towards zero.
func (x fint) rshDown(shift int) fint {
	// Special cases
	switch {
	case x == 0:
		return 0
	case shift <= 0:
		return x
	case shift >= len(pow10):
		return 0
	}
	// General case
	y := pow10[shift]
	return x / y
}

// prec returns length of x in decimal digits.
// prec assumes that 0 has no digits.
func (x fint) prec() int {
	left, right := 0, len(pow10)
	for left < right {
		mid := (left + right) / 2
		if x < pow10[mid] {
			right = mid
		} else {
			left = mid + 1
		}
	}
	return left
}

// ntz returns number of trailing zeros in x.
// ntz assumes that 0 has no trailing zeros.
func (x fint) ntz() int {
	left, right := 1, x.prec()
	for left < right {
		mid := (left + right) / 2
		if x%pow10[mid] == 0 {
			left = mid + 1
		} else {
			right = mid
		}
	}
	return left - 1
}

// hasPrec returns true if x has given number of digits or more.
// hasPrec assumes that 0 has no digits.
//
// x.hasPrec(p) is significantly faster than x.prec() >= p.
func (x fint) hasPrec(prec int) bool {
	// Special cases
	switch {
	case prec < 1:
		return true
	case prec > len(pow10):
		return false
	}
	// General case
	return x >= pow10[prec-1]
}

// bint (Big INTeger) is a wrapper around big.Int.
type bint big.Int

// bpow10 is a cache of powers of 10, where bpow10[x] = 10^x.
var bpow10 = [...]*bint{
	mustParseBint("1"),
	mustParseBint("10"),
	mustParseBint("100"),
	mustParseBint("1000"),
	mustParseBint("10000"),
	mustParseBint("100000"),
	mustParseBint("1000000"),
	mustParseBint("10000000"),
	mustParseBint("100000000"),
	mustParseBint("1000000000"),
	mustParseBint("10000000000"),
	mustParseBint("100000000000"),
	mustParseBint("1000000000000"),
	mustParseBint("10000000000000"),
	mustParseBint("100000000000000"),
	mustParseBint("1000000000000000"),
	mustParseBint("10000000000000000"),
	mustParseBint("100000000000000000"),
	mustParseBint("1000000000000000000"),
	mustParseBint("10000000000000000000"),
	mustParseBint("100000000000000000000"),
	mustParseBint("1000000000000000000000"),
	mustParseBint("10000000000000000000000"),
	mustParseBint("100000000000000000000000"),
	mustParseBint("1000000000000000000000000"),
	mustParseBint("10000000000000000000000000"),
	mustParseBint("100000000000000000000000000"),
	mustParseBint("1000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
	mustParseBint("1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),
}

// bfact is a cache of factorials, where bfact[x] = x!.
var bfact = [...]*bint{
	mustParseBint("1"),
	mustParseBint("1"),
	mustParseBint("2"),
	mustParseBint("6"),
	mustParseBint("24"),
	mustParseBint("120"),
	mustParseBint("720"),
	mustParseBint("5040"),
	mustParseBint("40320"),
	mustParseBint("362880"),
	mustParseBint("3628800"),
	mustParseBint("39916800"),
	mustParseBint("479001600"),
	mustParseBint("6227020800"),
	mustParseBint("87178291200"),
	mustParseBint("1307674368000"),
	mustParseBint("20922789888000"),
	mustParseBint("355687428096000"),
	mustParseBint("6402373705728000"),
	mustParseBint("121645100408832000"),
	mustParseBint("2432902008176640000"),
	mustParseBint("51090942171709440000"),
	mustParseBint("1124000727777607680000"),
	mustParseBint("25852016738884976640000"),
	mustParseBint("620448401733239439360000"),
	mustParseBint("15511210043330985984000000"),
	mustParseBint("403291461126605635584000000"),
	mustParseBint("10888869450418352160768000000"),
	mustParseBint("304888344611713860501504000000"),
	mustParseBint("8841761993739701954543616000000"),
	mustParseBint("265252859812191058636308480000000"),
	mustParseBint("8222838654177922817725562880000000"),
	mustParseBint("263130836933693530167218012160000000"),
	mustParseBint("8683317618811886495518194401280000000"),
	mustParseBint("295232799039604140847618609643520000000"),
	mustParseBint("10333147966386144929666651337523200000000"),
	mustParseBint("371993326789901217467999448150835200000000"),
	mustParseBint("13763753091226345046315979581580902400000000"),
	mustParseBint("523022617466601111760007224100074291200000000"),
	mustParseBint("20397882081197443358640281739902897356800000000"),
	mustParseBint("815915283247897734345611269596115894272000000000"),
	mustParseBint("33452526613163807108170062053440751665152000000000"),
	mustParseBint("1405006117752879898543142606244511569936384000000000"),
	mustParseBint("60415263063373835637355132068513997507264512000000000"),
	mustParseBint("2658271574788448768043625811014615890319638528000000000"),
	mustParseBint("119622220865480194561963161495657715064383733760000000000"),
	mustParseBint("5502622159812088949850305428800254892961651752960000000000"),
	mustParseBint("258623241511168180642964355153611979969197632389120000000000"),
	mustParseBint("12413915592536072670862289047373375038521486354677760000000000"),
	mustParseBint("608281864034267560872252163321295376887552831379210240000000000"),
	mustParseBint("30414093201713378043612608166064768844377641568960512000000000000"),
	mustParseBint("1551118753287382280224243016469303211063259720016986112000000000000"),
	mustParseBint("80658175170943878571660636856403766975289505440883277824000000000000"),
	mustParseBint("4274883284060025564298013753389399649690343788366813724672000000000000"),
	mustParseBint("230843697339241380472092742683027581083278564571807941132288000000000000"),
	mustParseBint("12696403353658275925965100847566516959580321051449436762275840000000000000"),
	mustParseBint("710998587804863451854045647463724949736497978881168458687447040000000000000"),
	mustParseBint("40526919504877216755680601905432322134980384796226602145184481280000000000000"),
	mustParseBint("2350561331282878571829474910515074683828862318181142924420699914240000000000000"),
	mustParseBint("138683118545689835737939019720389406345902876772687432540821294940160000000000000"),
	mustParseBint("8320987112741390144276341183223364380754172606361245952449277696409600000000000000"),
	mustParseBint("507580213877224798800856812176625227226004528988036003099405939480985600000000000000"),
	mustParseBint("31469973260387937525653122354950764088012280797258232192163168247821107200000000000000"),
	mustParseBint("1982608315404440064116146708361898137544773690227268628106279599612729753600000000000000"),
	mustParseBint("126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000"),
	mustParseBint("8247650592082470666723170306785496252186258551345437492922123134388955774976000000000000000"),
	mustParseBint("544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000"),
	mustParseBint("36471110918188685288249859096605464427167635314049524593701628500267962436943872000000000000000"),
	mustParseBint("2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000"),
	mustParseBint("171122452428141311372468338881272839092270544893520369393648040923257279754140647424000000000000000"),
	mustParseBint("11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000"),
	mustParseBint("850478588567862317521167644239926010288584608120796235886430763388588680378079017697280000000000000000"),
	mustParseBint("61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000"),
	mustParseBint("4470115461512684340891257138125051110076800700282905015819080092370422104067183317016903680000000000000000"),
	mustParseBint("330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000"),
	mustParseBint("24809140811395398091946477116594033660926243886570122837795894512655842677572867409443815424000000000000000000"),
	mustParseBint("1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000"),
	mustParseBint("145183092028285869634070784086308284983740379224208358846781574688061991349156420080065207861248000000000000000000"),
	mustParseBint("11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000"),
	mustParseBint("894618213078297528685144171539831652069808216779571907213868063227837990693501860533361810841010176000000000000000000"),
	mustParseBint("71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000"),
	mustParseBint("5797126020747367985879734231578109105412357244731625958745865049716390179693892056256184534249745940480000000000000000000"),
	mustParseBint("475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000"),
	mustParseBint("39455239697206586511897471180120610571436503407643446275224357528369751562996629334879591940103770870906880000000000000000000"),
	mustParseBint("3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000"),
	mustParseBint("281710411438055027694947944226061159480056634330574206405101912752560026159795933451040286452340924018275123200000000000000000000"),
	mustParseBint("24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000"),
	mustParseBint("2107757298379527717213600518699389595229783738061356212322972511214654115727593174080683423236414793504734471782400000000000000000000"),
	mustParseBint("185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000"),
	mustParseBint("16507955160908461081216919262453619309839666236496541854913520707833171034378509739399912570787600662729080382999756800000000000000000000"),
	mustParseBint("1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000"),
	mustParseBint("135200152767840296255166568759495142147586866476906677791741734597153670771559994765685283954750449427751168336768008192000000000000000000000"),
	mustParseBint("12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000"),
	mustParseBint("1156772507081641574759205162306240436214753229576413535186142281213246807121467315215203289516844845303838996289387078090752000000000000000000000"),
	mustParseBint("108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000"),
	mustParseBint("10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000"),
	mustParseBint("991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000"),
	mustParseBint("96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000"),
	mustParseBint("9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000"),
}

// bscale is a scale of precomputed values in bexp, blog and bnlog10.
const bscale = 40

// bexp is a cache of powers of e, where bexp[x] = round(exp(x) * 10^40).
var bexp = [...]*bint{
	mustParseBint("10000000000000000000000000000000000000000"),
	mustParseBint("27182818284590452353602874713526624977572"),
	mustParseBint("73890560989306502272304274605750078131803"),
	mustParseBint("200855369231876677409285296545817178969879"),
	mustParseBint("545981500331442390781102612028608784027907"),
	mustParseBint("1484131591025766034211155800405522796234877"),
	mustParseBint("4034287934927351226083871805433882796058999"),
	mustParseBint("10966331584284585992637202382881214324422191"),
	mustParseBint("29809579870417282747435920994528886737559679"),
	mustParseBint("81030839275753840077099966894327599650114761"),
	mustParseBint("220264657948067165169579006452842443663535126"),
	mustParseBint("598741417151978184553264857922577816142610797"),
	mustParseBint("1627547914190039208080052048984867831702092845"),
	mustParseBint("4424133920089205033261027759490882817843913061"),
	mustParseBint("12026042841647767777492367707678594494124865434"),
	mustParseBint("32690173724721106393018550460917213155057385438"),
	mustParseBint("88861105205078726367630237407814503508027198219"),
	mustParseBint("241549527535752982147754351803858238798675673527"),
	mustParseBint("656599691373305111387865032590600335692163557862"),
	mustParseBint("1784823009631872608449100337887227038836197331652"),
	mustParseBint("4851651954097902779691068305415405586846389889448"),
	mustParseBint("13188157344832146972099988837453027850914444373805"),
	mustParseBint("35849128461315915616811599459784206892226930650373"),
	mustParseBint("97448034462489026000346326848229752776493877640360"),
	mustParseBint("264891221298434722941391621528118823408701986192485"),
	mustParseBint("720048993373858725241613514661261579152235338133953"),
	mustParseBint("1957296094288387642697763978760953427920361009506976"),
	mustParseBint("5320482406017986166837473043411774416592558042836888"),
	mustParseBint("14462570642914751736770474229969288569020623295099229"),
	mustParseBint("39313342971440420743886205808435276857969423334439022"),
	mustParseBint("106864745815244621469904686507414016500244950054730550"),
	mustParseBint("290488496652474252310856821116798256667646950902969802"),
	mustParseBint("789629601826806951609780226351082242199561951153523307"),
	mustParseBint("2146435797859160646242977615312608803692259060547978973"),
	mustParseBint("5834617425274548814029027346103910190036592389411081058"),
	mustParseBint("15860134523134307281296446257746601251762039501345261543"),
	mustParseBint("43112315471151952271134222928569253907888636167803477308"),
	mustParseBint("117191423728026113087729397911901945216753636944618223835"),
	mustParseBint("318559317571137562203286717012986459995422099051810077532"),
	mustParseBint("865934004239937469536069327192649342497018547001959865915"),
	mustParseBint("2353852668370199854078999107490348045088716172545554672367"),
	mustParseBint("6398434935300549492226634035155708188793366213968552794550"),
	mustParseBint("17392749415205010473946813036112352261479840577250084010371"),
	mustParseBint("47278394682293465614744575627442803708197519623809381709672"),
	mustParseBint("128516001143593082758092996321430992578011432207588258719200"),
	mustParseBint("349342710574850953480347972334060995334116564975181542601261"),
	mustParseBint("949611942060244887451336491171183231018171589210799878504382"),
	mustParseBint("2581312886190067396232858002152733804316370829930440608106140"),
	mustParseBint("7016735912097631738654715998861174054559379987253219837545489"),
	mustParseBint("19073465724950996905250998409538484473881897305437834024752347"),
	mustParseBint("51847055285870724640874533229334853848274691005838464019040569"),
	mustParseBint("140934908242693879644921433123701687886847607900637140170526193"),
	mustParseBint("383100800071657684930356954878619938987055974551165775908346028"),
	mustParseBint("1041375943302908779718347293349379643980467133154913248052087720"),
	mustParseBint("2830753303274693900442063548014074540850325893535906840720731339"),
	mustParseBint("7694785265142017138182745590129393992070767572650840919231681173"),
	mustParseBint("20916594960129961539070711572146737781529668474992672656676676057"),
	mustParseBint("56857199993359322226403488206332533033721583344882177434891220735"),
	mustParseBint("154553893559010393035307669111746200683637170969308302467116768062"),
	mustParseBint("420121040379051425495659343071916176841111197329909678646425729420"),
	mustParseBint("1142007389815684283662957183144765630198045959556395839565027991758"),
	mustParseBint("3104297935701919908707342141107100372062950176763708815107564010774"),
	mustParseBint("8438356668741454489073329480373117960080692679667410404618178186988"),
	mustParseBint("22937831594696098790993528402686136004632793409030482301381199511167"),
	mustParseBint("62351490808116168829092387089284697448313918462357999143885916990140"),
	mustParseBint("169488924441033371414178361143719749489262362255165049131572696453162"),
	mustParseBint("460718663433129154267731844280600868933490030370960407306440545574167"),
	mustParseBint("1252363170842213780513521960744365767534885274044974816408022857210242"),
	mustParseBint("3404276049931740521376907187004350595373876139945651636051545736600125"),
	mustParseBint("9253781725587787600242397916687345873476599207208413119353845239598413"),
	mustParseBint("25154386709191670062657811742521129614074129733831405138218401569861105"),
	mustParseBint("68376712297627438667558928266777109559458359312890877256686727658114853"),
	mustParseBint("185867174528412798034037018125454119469463966962328032683933850866499093"),
	mustParseBint("505239363027610419455703833218576464853672449756171770789213166551930106"),
	mustParseBint("1373382979540176187784188529808538931579983079249937463822561704858035705"),
	mustParseBint("3733241996799001640254908317264700143427783686916000023393828672448903946"),
	mustParseBint("10148003881138887278324617841317169757766648151681178808763635653226535478"),
	mustParseBint("27585134545231702062864698199026619433415201752487088590995883625110505109"),
	mustParseBint("74984169969901204346756305912240604547046589777861588130171222791280558952"),
	mustParseBint("203828106651266876683231375371726323746973648615242102353428236178115964699"),
	mustParseBint("554062238439351005257117339583166129248567288326853228703001882820457004497"),
	mustParseBint("1506097314585030548352594130167674981899396492128265421629867495043027091398"),
	mustParseBint("4093996962127454696660914229327829043200537921938527777647428991700125373374"),
	mustParseBint("11128637547917594120870714781839408057340769207204930341930032294439923480142"),
	mustParseBint("30250773222011423382665663964434287424690322223040881602116084211601897768842"),
	mustParseBint("82230127146229135103043280164077746954862861884762740395239338497441610348757"),
	mustParseBint("223524660373471504744306573233271473987753925132099739429441837680417972801971"),
	mustParseBint("607603022505687214952232893813027607526137532596212101484085761453808043968143"),
	mustParseBint("1651636254994001855528329796264858767069628842000044813888811507530815559084855"),
	mustParseBint("4489612819174345246284245579645316277765980586371851526049317217652687150894562"),
	mustParseBint("12204032943178408020027100351363697539707464210997675462443438298243127273585772"),
	mustParseBint("33174000983357426257555161078525919096030145811823308270488072600691470127989678"),
	mustParseBint("90176284050342989314009959821709052591287461132007268331792149066465537579218609"),
	mustParseBint("245124554292008578555277294311091534234875641496469060954583388360415063258824081"),
	mustParseBint("666317621641089583424481405024087326268738875420965655939985025716548852338674439"),
	mustParseBint("1811239082889023282193798758098815925047897174544128618703060579473814364244597447"),
	mustParseBint("4923458286012058399754862059113304494837799571252660279409509621865019936779306778"),
	mustParseBint("13383347192042695004617364087061150290767174572136446001205548731904473876766495093"),
	mustParseBint("36379709476088045792877438267601857298931012558640829628754924149828121778270335566"),
	mustParseBint("98890303193469467705600309671380371014050826071993351734019971537110944470074060060"),
}

// blog is a cache of natural logarithms, where blog[x] = round(ln(x) * 10^40).
var blog = [...]*bint{
	nil,
	mustParseBint("0"),
	mustParseBint("6931471805599453094172321214581765680755"),
	mustParseBint("10986122886681096913952452369225257046475"),
	mustParseBint("13862943611198906188344642429163531361510"),
	mustParseBint("16094379124341003746007593332261876395256"),
	mustParseBint("17917594692280550008124773583807022727230"),
	mustParseBint("19459101490553133051053527434431797296371"),
	mustParseBint("20794415416798359282516963643745297042265"),
	mustParseBint("21972245773362193827904904738450514092950"),
	mustParseBint("23025850929940456840179914546843642076011"),
	mustParseBint("23978952727983705440619435779651292998217"),
	mustParseBint("24849066497880003102297094798388788407985"),
	mustParseBint("25649493574615367360534874415653186048053"),
	mustParseBint("26390573296152586145225848649013562977126"),
	mustParseBint("27080502011022100659960045701487133441731"),
	mustParseBint("27725887222397812376689284858327062723020"),
	mustParseBint("28332133440562160802495346178731265355882"),
	mustParseBint("28903717578961646922077225953032279773705"),
	mustParseBint("29444389791664404600090274318878535372374"),
	mustParseBint("29957322735539909934352235761425407756766"),
	mustParseBint("30445224377234229965005979803657054342846"),
	mustParseBint("30910424533583158534791756994233058678972"),
	mustParseBint("31354942159291496908067528318101961184424"),
	mustParseBint("31780538303479456196469416012970554088740"),
	mustParseBint("32188758248682007492015186664523752790512"),
	mustParseBint("32580965380214820454707195630234951728808"),
	mustParseBint("32958368660043290741857357107675771139425"),
	mustParseBint("33322045101752039239398169863595328657881"),
	mustParseBint("33672958299864740271832720323619116054945"),
	mustParseBint("34011973816621553754132366916068899122486"),
	mustParseBint("34339872044851462459291643245423572104499"),
	mustParseBint("34657359027997265470861606072908828403775"),
	mustParseBint("34965075614664802354571888148876550044692"),
	mustParseBint("35263605246161613896667667393313031036637"),
	mustParseBint("35553480614894136797061120766693673691627"),
	mustParseBint("35835189384561100016249547167614045454460"),
	mustParseBint("36109179126442244443680956710314471639001"),
	mustParseBint("36375861597263857694262595533460301053129"),
	mustParseBint("36635616461296464274487326784878443094528"),
	mustParseBint("36888794541139363028524556976007173437521"),
	mustParseBint("37135720667043078038667633730374075883764"),
	mustParseBint("37376696182833683059178301018238820023601"),
	mustParseBint("37612001156935624234728425133458470355591"),
	mustParseBint("37841896339182611628964078208814824359727"),
	mustParseBint("38066624897703197573912498070712390488206"),
	mustParseBint("38286413964890950002239849532683726865179"),
	mustParseBint("38501476017100585868209506697721737088961"),
	mustParseBint("38712010109078909290641737227552319769495"),
	mustParseBint("38918202981106266102107054868863594592742"),
	mustParseBint("39120230054281460586187507879105518471267"),
	mustParseBint("39318256327243257716447798547956522402357"),
	mustParseBint("39512437185814273548879516844816717409563"),
	mustParseBint("39702919135521218341444691390290577703600"),
	mustParseBint("39889840465642743836029678322257536820180"),
	mustParseBint("40073331852324709186627029111913169393473"),
	mustParseBint("40253516907351492333570491078177094338636"),
	mustParseBint("40430512678345501514042726688103792418849"),
	mustParseBint("40604430105464193366005041538200881735700"),
	mustParseBint("40775374439057194506160503737196976240633"),
	mustParseBint("40943445622221006848304688130650664803241"),
	mustParseBint("41108738641733112487513891034256147463157"),
	mustParseBint("41271343850450915553463964460005337785254"),
	mustParseBint("41431347263915326878958432172882311389321"),
	mustParseBint("41588830833596718565033927287490594084530"),
	mustParseBint("41743872698956371106542467747915062443309"),
	mustParseBint("41896547420264255448744209363458315725447"),
	mustParseBint("42046926193909660596700719963637227505669"),
	mustParseBint("42195077051761066990839988607894796717392"),
	mustParseBint("42341065045972593822019980687327218230899"),
	mustParseBint("42484952420493589891233441981275439372382"),
	mustParseBint("42626798770413154213294545325130340967596"),
	mustParseBint("42766661190160553110421868382195811135215"),
	mustParseBint("42904594411483911290921088574385425709048"),
	mustParseBint("43040650932041697537853277924896237319756"),
	mustParseBint("43174881135363104405967639033749009836987"),
	mustParseBint("43307333402863310788434916748042066733884"),
	mustParseBint("43438054218536838491672963214083090294588"),
	mustParseBint("43567088266895917368659647999460208775283"),
	mustParseBint("43694478524670214941729455414814109221735"),
	mustParseBint("43820266346738816122696878190588939118276"),
	mustParseBint("43944491546724387655809809476901028185900"),
	mustParseBint("44067192472642531132839954944955841564519"),
	mustParseBint("44188406077965979234754722232913704530293"),
	mustParseBint("44308167988433136153350622232820585704356"),
	mustParseBint("44426512564903164548502939510993141751138"),
	mustParseBint("44543472962535077328900746348040236036346"),
	mustParseBint("44659081186545837185785172692844373101420"),
	mustParseBint("44773368144782064723136399423396590040482"),
	mustParseBint("44886363697321398383178155406698492194047"),
	mustParseBint("44998096703302650668084819285294156168961"),
	mustParseBint("45108595065168500411588401850084983344424"),
	mustParseBint("45217885770490403096412170747265492545934"),
	mustParseBint("45325994931532559373244095614648829150974"),
	mustParseBint("45432947822700038962381827912303502769716"),
	mustParseBint("45538768916005408346097867651140411767630"),
	mustParseBint("45643481914678362384814058442134085450250"),
	mustParseBint("45747109785033828221167216217039617138089"),
	mustParseBint("45849674786705719196279376083445360273497"),
	mustParseBint("45951198501345899268524340518101807091167"),
}

// bnlog10 is a cache of  multiples of the natural logarithm of 10, where bnlog10[x] = round(x * ln(10) * 10^40).
var bnlog10 = [...]*bint{
	mustParseBint("0"),
	mustParseBint("23025850929940456840179914546843642076011"),
	mustParseBint("46051701859880913680359829093687284152022"),
	mustParseBint("69077552789821370520539743640530926228033"),
	mustParseBint("92103403719761827360719658187374568304044"),
	mustParseBint("115129254649702284200899572734218210380055"),
	mustParseBint("138155105579642741041079487281061852456066"),
	mustParseBint("161180956509583197881259401827905494532077"),
	mustParseBint("184206807439523654721439316374749136608088"),
	mustParseBint("207232658369464111561619230921592778684099"),
	mustParseBint("230258509299404568401799145468436420760110"),
	mustParseBint("253284360229345025241979060015280062836121"),
	mustParseBint("276310211159285482082158974562123704912132"),
	mustParseBint("299336062089225938922338889108967346988143"),
	mustParseBint("322361913019166395762518803655810989064154"),
	mustParseBint("345387763949106852602698718202654631140165"),
	mustParseBint("368413614879047309442878632749498273216176"),
	mustParseBint("391439465808987766283058547296341915292187"),
	mustParseBint("414465316738928223123238461843185557368198"),
	mustParseBint("437491167668868679963418376390029199444209"),
	mustParseBint("460517018598809136803598290936872841520220"),
	mustParseBint("483542869528749593643778205483716483596231"),
	mustParseBint("506568720458690050483958120030560125672242"),
	mustParseBint("529594571388630507324138034577403767748253"),
	mustParseBint("552620422318570964164317949124247409824264"),
	mustParseBint("575646273248511421004497863671091051900275"),
	mustParseBint("598672124178451877844677778217934693976286"),
	mustParseBint("621697975108392334684857692764778336052297"),
	mustParseBint("644723826038332791525037607311621978128308"),
	mustParseBint("667749676968273248365217521858465620204319"),
	mustParseBint("690775527898213705205397436405309262280330"),
	mustParseBint("713801378828154162045577350952152904356341"),
	mustParseBint("736827229758094618885757265498996546432352"),
	mustParseBint("759853080688035075725937180045840188508363"),
	mustParseBint("782878931617975532566117094592683830584375"),
	mustParseBint("805904782547915989406297009139527472660386"),
	mustParseBint("828930633477856446246476923686371114736397"),
	mustParseBint("851956484407796903086656838233214756812408"),
	mustParseBint("874982335337737359926836752780058398888419"),
	mustParseBint("898008186267677816767016667326902040964430"),
	mustParseBint("921034037197618273607196581873745683040441"),
	mustParseBint("944059888127558730447376496420589325116452"),
	mustParseBint("967085739057499187287556410967432967192463"),
	mustParseBint("990111589987439644127736325514276609268474"),
	mustParseBint("1013137440917380100967916240061120251344485"),
	mustParseBint("1036163291847320557808096154607963893420496"),
	mustParseBint("1059189142777261014648276069154807535496507"),
	mustParseBint("1082214993707201471488455983701651177572518"),
	mustParseBint("1105240844637141928328635898248494819648529"),
	mustParseBint("1128266695567082385168815812795338461724540"),
	mustParseBint("1151292546497022842008995727342182103800551"),
	mustParseBint("1174318397426963298849175641889025745876562"),
	mustParseBint("1197344248356903755689355556435869387952573"),
	mustParseBint("1220370099286844212529535470982713030028584"),
	mustParseBint("1243395950216784669369715385529556672104595"),
	mustParseBint("1266421801146725126209895300076400314180606"),
	mustParseBint("1289447652076665583050075214623243956256617"),
	mustParseBint("1312473503006606039890255129170087598332628"),
	mustParseBint("1335499353936546496730435043716931240408639"),
	mustParseBint("1358525204866486953570614958263774882484650"),
	mustParseBint("1381551055796427410410794872810618524560661"),
	mustParseBint("1404576906726367867250974787357462166636672"),
	mustParseBint("1427602757656308324091154701904305808712683"),
	mustParseBint("1450628608586248780931334616451149450788694"),
	mustParseBint("1473654459516189237771514530997993092864705"),
	mustParseBint("1496680310446129694611694445544836734940716"),
	mustParseBint("1519706161376070151451874360091680377016727"),
	mustParseBint("1542732012306010608292054274638524019092738"),
	mustParseBint("1565757863235951065132234189185367661168749"),
	mustParseBint("1588783714165891521972414103732211303244760"),
	mustParseBint("1611809565095831978812594018279054945320771"),
	mustParseBint("1634835416025772435652773932825898587396782"),
	mustParseBint("1657861266955712892492953847372742229472793"),
	mustParseBint("1680887117885653349333133761919585871548804"),
	mustParseBint("1703912968815593806173313676466429513624815"),
	mustParseBint("1726938819745534263013493591013273155700826"),
	mustParseBint("1749964670675474719853673505560116797776837"),
	mustParseBint("1772990521605415176693853420106960439852848"),
	mustParseBint("1796016372535355633534033334653804081928859"),
	mustParseBint("1819042223465296090374213249200647724004870"),
	mustParseBint("1842068074395236547214393163747491366080881"),
	mustParseBint("1865093925325177004054573078294335008156892"),
	mustParseBint("1888119776255117460894752992841178650232903"),
	mustParseBint("1911145627185057917734932907388022292308914"),
	mustParseBint("1934171478114998374575112821934865934384925"),
	mustParseBint("1957197329044938831415292736481709576460936"),
	mustParseBint("1980223179974879288255472651028553218536947"),
	mustParseBint("2003249030904819745095652565575396860612958"),
	mustParseBint("2026274881834760201935832480122240502688969"),
	mustParseBint("2049300732764700658776012394669084144764980"),
	mustParseBint("2072326583694641115616192309215927786840991"),
	mustParseBint("2095352434624581572456372223762771428917002"),
	mustParseBint("2118378285554522029296552138309615070993013"),
	mustParseBint("2141404136484462486136732052856458713069024"),
	mustParseBint("2164429987414402942976911967403302355145035"),
	mustParseBint("2187455838344343399817091881950145997221046"),
	mustParseBint("2210481689274283856657271796496989639297057"),
	mustParseBint("2233507540204224313497451711043833281373068"),
	mustParseBint("2256533391134164770337631625590676923449079"),
	mustParseBint("2279559242064105227177811540137520565525090"),
}

// mustParseBint converts a string to *big.Int, panicking on error.
// Use only for package variable initialization and test code!
func mustParseBint(s string) *bint {
	z, ok := new(big.Int).SetString(s, 10)
	if !ok {
		panic(fmt.Errorf("mustParseBint(%q) failed: parsing error", s))
	}
	if z.Sign() < 0 {
		panic(fmt.Errorf("mustParseBint(%q) failed: negative number", s))
	}
	return (*bint)(z)
}

func (z *bint) sign() int {
	return (*big.Int)(z).Sign()
}

func (z *bint) cmp(x *bint) int {
	return (*big.Int)(z).Cmp((*big.Int)(x))
}

func (z *bint) string() string {
	return (*big.Int)(z).String()
}

func (z *bint) setBint(x *bint) {
	(*big.Int)(z).Set((*big.Int)(x))
}

func (z *bint) setInt64(x int64) {
	(*big.Int)(z).SetInt64(x)
}

func (z *bint) setFint(x fint) {
	(*big.Int)(z).SetUint64(uint64(x))
}

// fint converts *big.Int to uint64.
// If z cannot be represented as uint64, the result is undefined.
func (z *bint) fint() fint {
	f := (*big.Int)(z).Uint64()
	return fint(f)
}

// add calculates z = x + y.
func (z *bint) add(x, y *bint) {
	(*big.Int)(z).Add((*big.Int)(x), (*big.Int)(y))
}

// inc calcualtes z = x + 1.
func (z *bint) inc(x *bint) {
	y := bpow10[0]
	z.add(x, y)
}

// sub calculates z = x - y.
func (z *bint) sub(x, y *bint) {
	(*big.Int)(z).Sub((*big.Int)(x), (*big.Int)(y))
}

// subAbs calculates z = |x - y|.
func (z *bint) subAbs(x, y *bint) {
	switch x.cmp(y) {
	case 1:
		z.sub(x, y)
	default:
		z.sub(y, x)
	}
}

// dbl (Double) calculates z = x * 2.
func (z *bint) dbl(x *bint) {
	(*big.Int)(z).Lsh((*big.Int)(x), 1)
}

// hlf (Half) calculates z = ⌊x / 2⌋.
func (z *bint) hlf(x *bint) {
	(*big.Int)(z).Rsh((*big.Int)(x), 1)
}

// mul calculates z = x * y.
func (z *bint) mul(x, y *bint) {
	// Copying x, y to prevent heap allocations.
	if z == x {
		b := getBint()
		defer putBint(b)
		b.setBint(x)
		x = b
	}
	if z == y {
		b := getBint()
		defer putBint(b)
		b.setBint(y)
		y = b
	}
	(*big.Int)(z).Mul((*big.Int)(x), (*big.Int)(y))
}

// pow calculates z = x^y.
// If y is negative, the result is unpredictable.
func (z *bint) pow(x, y *bint) {
	(*big.Int)(z).Exp((*big.Int)(x), (*big.Int)(y), nil)
}

// pow10 calculates z = 10^power.
// If power is negative, the result is unpredictable.
func (z *bint) pow10(power int) {
	x := getBint()
	defer putBint(x)
	x.setInt64(10)
	y := getBint()
	defer putBint(y)
	y.setInt64(int64(power))
	z.pow(x, y)
}

// quo calculates z = ⌊x / y⌋.
func (z *bint) quo(x, y *bint) {
	// Passing r to prevent heap allocations.
	r := getBint()
	defer putBint(r)
	z.quoRem(x, y, r)
}

// quoRem calculates z = ⌊x / y⌋, r = x - y * z.
func (z *bint) quoRem(x, y, r *bint) {
	(*big.Int)(z).QuoRem((*big.Int)(x), (*big.Int)(y), (*big.Int)(r))
}

func (z *bint) isOdd() bool {
	return (*big.Int)(z).Bit(0) != 0
}

// lsh (Left Shift) calculates z = x * 10^shift.
func (z *bint) lsh(x *bint, shift int) {
	var y *bint
	if shift < len(bpow10) {
		y = bpow10[shift]
	} else {
		y = getBint()
		defer putBint(y)
		y.pow10(shift)
	}
	z.mul(x, y)
}

// fsa (Fused Shift and Addition) calculates z = x * 10^shift + f.
func (z *bint) fsa(x *bint, shift int, f fint) {
	y := getBint()
	defer putBint(y)
	y.setFint(f)
	z.lsh(x, shift)
	z.add(z, y)
}

// rshDown (Right Shift) calculates z = ⌊x / 10^shift⌋ and rounds
// result towards zero.
func (z *bint) rshDown(x *bint, shift int) {
	// Special cases
	switch {
	case x.sign() == 0:
		z.setFint(0)
		return
	case shift <= 0:
		z.setBint(x)
		return
	}
	// General case
	var y *bint
	if shift < len(bpow10) {
		y = bpow10[shift]
	} else {
		y = getBint()
		defer putBint(y)
		y.pow10(shift)
	}
	z.quo(x, y)
}

// rshHalfEven (Right Shift) calculates z = round(x / 10^shift) and
// rounds result using "half to even" rule.
func (z *bint) rshHalfEven(x *bint, shift int) {
	// Special cases
	switch {
	case x.sign() == 0:
		z.setFint(0)
		return
	case shift <= 0:
		z.setBint(x)
		return
	}
	// General case
	var y, r *bint
	r = getBint()
	defer putBint(r)
	if shift < len(bpow10) {
		y = bpow10[shift]
	} else {
		y = getBint()
		defer putBint(y)
		y.pow10(shift)
	}
	z.quoRem(x, y, r)
	r.dbl(r) // r = r * 2
	switch y.cmp(r) {
	case -1:
		z.inc(z) // z = z + 1
	case 0:
		// half-to-even
		if z.isOdd() {
			z.inc(z) // z = z + 1
		}
	}
}

// prec returns length of z in decimal digits.
// prec assumes that 0 has no digits.
// If z is negative, the result is unpredictable.
//
// z.prec() is significantly faster than len(z.string()),
// if z has less than len(bpow10) digits.
func (z *bint) prec() int {
	// Special case
	if z.cmp(bpow10[len(bpow10)-1]) > 0 {
		return len(z.string())
	}
	// General case
	left, right := 0, len(bpow10)
	for left < right {
		mid := (left + right) / 2
		if z.cmp(bpow10[mid]) < 0 {
			right = mid
		} else {
			left = mid + 1
		}
	}
	return left
}

// hasPrec checks if z has a given number of digits or more.
// hasPrec assumes that 0 has no digits.
// If z is negative, the result is unpredictable.
//
// z.hasPrec(p) is significantly faster than z.prec() >= p,
// if z has no more than len(bpow10) digits.
func (z *bint) hasPrec(prec int) bool {
	// Special cases
	switch {
	case prec < 1:
		return true
	case prec > len(bpow10):
		return len(z.string()) >= prec
	}
	// General case
	return z.cmp(bpow10[prec-1]) >= 0
}

// bpool is a cache of reusable *big.Int instances.
var bpool = sync.Pool{
	New: func() any {
		return (*bint)(new(big.Int))
	},
}

// getBint obtains a *big.Int from the pool.
func getBint() *bint {
	return bpool.Get().(*bint)
}

// putBint returns the *big.Int into the pool.
func putBint(b *bint) {
	bpool.Put(b)
}
